// Code generated by MockGen. DO NOT EDIT.
// Source: tickdata.go
//
// Generated by this command:
//
//	mockgen -destination=mock/tickdata.mock.go -package=mock -source tickdata.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	api "github.com/qubic/archive-query-service/v2/api/archive-query-service/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockTickDataRepository is a mock of TickDataRepository interface.
type MockTickDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTickDataRepositoryMockRecorder
	isgomock struct{}
}

// MockTickDataRepositoryMockRecorder is the mock recorder for MockTickDataRepository.
type MockTickDataRepositoryMockRecorder struct {
	mock *MockTickDataRepository
}

// NewMockTickDataRepository creates a new mock instance.
func NewMockTickDataRepository(ctrl *gomock.Controller) *MockTickDataRepository {
	mock := &MockTickDataRepository{ctrl: ctrl}
	mock.recorder = &MockTickDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTickDataRepository) EXPECT() *MockTickDataRepositoryMockRecorder {
	return m.recorder
}

// GetTickData mocks base method.
func (m *MockTickDataRepository) GetTickData(ctx context.Context, tickNumber uint32) (*api.TickData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickData", ctx, tickNumber)
	ret0, _ := ret[0].(*api.TickData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickData indicates an expected call of GetTickData.
func (mr *MockTickDataRepositoryMockRecorder) GetTickData(ctx, tickNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickData", reflect.TypeOf((*MockTickDataRepository)(nil).GetTickData), ctx, tickNumber)
}
